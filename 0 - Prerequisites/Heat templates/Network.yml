heat_template_version: 2013-05-23
# Author: Miguel Angel Diego Alfageme
# Date: 05/09/2017
# Purpose: Deploy Infraestructure needed to make a Docker network 
# on Fujitsu's Cloud Service K5 IaaS Platform
#
#
description: Deploy Network

# Input parameters
parameters:
  name_preffix:
    type: string
    label: Name preffix
    description: Name preffix used to concat to all the resources (unique for K5 project)
    default: "cnets-iccs"
  privatecidr:
    type: string
    label: CIDR
    description: Private CIDR
    default: "10.20.20.0/24"
  routerid:
    type: string
    label: Router ID
    description: Router to link public and private net
    default: "fa137d69-f35c-4160-b6e1-5927033eb465"
  az:
    type: string
    label: Availability Zone
    description: Region AZ to use
    default: "es-1a"
  my_ip:
    type: string
    label: External management IP
    description: IP address allowed for access to our infra
    default: "0.0.0.0/0" 

# K5 Infrastructure resources to be built
resources:

# Create docker & http access
  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: docker infra security group
      name:
        str_replace:
          template: "$name_preffix-access"
          params:
            "$name_preffix": { get_param: name_preffix } 
      rules:
        # allow inbound ssh and ping from my ip
        - remote_ip_prefix: { get_param: my_ip }
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: { get_param: my_ip }
          protocol: icmp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 80
          port_range_max: 80
        - remote_ip_prefix: { get_param: privatecidr }
          protocol: tcp
          port_range_min: 1
          port_range_max: 65535
        - remote_ip_prefix: { get_param: privatecidr }
          protocol: udp
          port_range_min: 1
          port_range_max: 65535
        - remote_ip_prefix: { get_param: privatecidr }
          protocol: icmp       
  
  private_network:
    type: OS::Neutron::Net
    properties:
      availability_zone: { get_param: az }
      name:
        str_replace:
          template: "$name_preffix-net"
          params:
            "$name_preffix": { get_param: name_preffix } 

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      availability_zone: { get_param: az }
      network_id: { get_resource: private_network }
      cidr: {get_param: privatecidr}
      name:
        str_replace:
          template: "$name_preffix-subnet"
          params:
            "$name_preffix": { get_param: name_preffix } 
      dns_nameservers:
        - 62.60.39.9
        - 62.60.39.10
        - 8.8.8.8
  
  # Connect an interface on the network's subnet to the router
  router_interface:
    type: OS::Neutron::RouterInterface
    depends_on: [private_subnet]
    properties:
      router_id: { get_param: routerid }
      subnet_id: { get_resource: private_subnet }
